{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","todos","renderTableHeader","Object","keys","map","attr","toUpperCase","renderTableRows","todo","id","name","username","email","address","street","suite","city","zipcode","class","geo","lat","lng","phone","website","company","catchPhrase","bs","a","axios","get","results","this","setState","data","className","length","role","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA0EeA,E,4MAhEbC,MAAQ,CAAEC,MAAO,I,EAMjBC,kBAAoB,WACjB,OAAOC,OAAOC,KAAK,EAAKJ,MAAMC,MAAM,IAAII,KAAI,SAAAC,GAAI,OAAI,6BACjDA,EAAKC,eADqDD,O,EAKhEE,gBAAkB,WAChB,OAAQ,EAAKR,MAAMC,MAAMI,KAAI,SAAAI,GAC3B,OACE,+BACE,6BAAKA,EAAKC,KACV,6BAAKD,EAAKE,OACV,6BAAKF,EAAKG,WACV,6BAAKH,EAAKI,QACV,yCACMJ,EAAKK,QAAQC,OADnB,aAC8BN,EAAKK,QAAQE,MAD3C,aACqDP,EAAKK,QAAQG,KADlE,aAC2ER,EAAKK,QAAQI,QADxF,MAEG,wBAAOC,MAAM,aAAb,sBAAoCV,EAAKK,QAAQM,IAAIC,IAArD,MAA6DZ,EAAKK,QAAQM,IAAIE,UAEjF,6BAAKb,EAAKc,QACV,6BAAKd,EAAKe,UACV,yCACMf,EAAKgB,QAAQd,MACjB,oBAAGQ,MAAM,WAAT,cAAsBV,EAAKgB,QAAQC,YAAnC,OACA,uBAAOP,MAAM,aAAb,SAA2BV,EAAKgB,QAAQE,UAdnClB,EAAKC,Q,8FAdpB,4BAAAkB,EAAA,sEACsBC,IAAMC,IAAI,8CADhC,OACMC,EADN,OAEEC,KAAKC,SAAS,CAAChC,MAAO8B,EAAQG,OAFhC,gD,0EAoCA,WACE,OACE,qBAAKC,UAAU,eAAf,SAEGH,KAAKhC,MAAMC,MAAMmC,OAAS,EAC3B,gCACE,kDACA,wBAAOjB,MAAM,kCAAb,UACE,uBAAOA,MAAM,aAAb,SACE,6BACGa,KAAK9B,wBAGV,gCACK8B,KAAKxB,0BAIZ,qBAAK2B,UAAU,8BAA8BE,KAAK,SAAlD,SACA,sBAAMF,UAAU,kBAAhB,gC,GA3DQG,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAS1Bb,M","file":"static/js/main.fb6abafe.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react'\nimport \"./App.css\";\nimport TodoList from './TodoList';\nimport axios from \"axios\";\n\n\nclass App extends Component {\n  //<TodoList />\n\n  state = { todos: []};\n  async componentDidMount(){\n    let results = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({todos: results.data});\n  }\n\n  renderTableHeader = () => {\n     return Object.keys(this.state.todos[0]).map(attr => <th key={attr}>\n       {attr.toUpperCase()}\n     </th>)\n  }\n\n  renderTableRows = () => {\n    return  this.state.todos.map(todo => {\n      return(\n        <tr key={todo.id}>\n          <td>{todo.id}</td>\n          <td>{todo.name}</td>\n          <td>{todo.username}</td>\n          <td>{todo.email}</td>\n          <td>\n            {`${todo.address.street}, ${todo.address.suite}, ${todo.address.city}, ${todo.address.zipcode}. `}\n             <small class=\"text-muted\">LAT/LONG:{todo.address.geo.lat}, ${todo.address.geo.lng}</small>\n          </td>\n          <td>{todo.phone}</td>\n          <td>{todo.website}</td>\n          <td>\n            {`${todo.company.name}`}\n            <p class=\"fw-light\">\"{todo.company.catchPhrase}\"</p>\n            <small class=\"text-muted\">{todo.company.bs}</small>\n          </td>\n        </tr>\n\n      )\n    })\n }\n\n  render (){\n    return(\n      <div className=\"container-sm\"  >\n        \n        {this.state.todos.length > 0 ? (\n        <div>\n          <h1>Contacts Listing</h1>\n          <table class=\"table table-striped table-hover\">\n            <thead class=\"table-dark\">\n              <tr>\n                {this.renderTableHeader()}\n              </tr>\n            </thead>\n            <tbody>\n                {this.renderTableRows()}\n            </tbody>\n          </table>\n        </div>) : (\n          <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n          </div>\n          )}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//ReactDOM.render(<h1>Contacts Listing</h1>, document.getElementById('root')\n//);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}